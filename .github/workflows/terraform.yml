name: Terraform Plan and Apply for Azure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest

    outputs:
      container_registry_login_server: ${{ steps.reg_var.outputs.container_registry_login_server }}
      container_registry_admin_username: ${{ steps.reg_var.outputs.container_registry_admin_username }}
      container_registry_admin_password: ${{ steps.reg_var.outputs.container_registry_admin_password }}
      kube_config: ${{ steps.reg_var.outputs.kube_config }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.0

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    # verificar se o resource group já existe
    - name: Check if Resource Group exists
      id: rg_exists
      continue-on-error: true
      run: |
        az group show --name rg_DesafioDevOps --output json > rg.json
        if [ -s rg.json ]; then
          echo "exists=true" >> $GITHUB_ENV
        else 
          echo "exists=false" >> $GITHUB_ENV
        fi

    # se o resource group existir, deletá-lo
    - name: Destroy existing Resource Group if it exists
      if: env.exists == 'true'
      continue-on-error: true
      working-directory: ./terraform
      run: |
        terraform destroy -target=azurerm_resource_group.rg_DesafioDevOps -auto-approve

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan for Azure
      working-directory: ./terraform
      run: terraform plan -out=deploy_plan.tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v2
      with:
        name: deploy_plan
        path: ./terraform/deploy_plan.tfplan

    - name: Terraform Apply for Azure
      working-directory: ./terraform
      run: terraform apply -auto-approve ./deploy_plan.tfplan

    # Capturando os Outputs do Terraform e definindo variáveis de saída para a próxima pipeline
    - name: Set Output Variables
      id: reg_var
      working-directory: ./terraform
      run: |
        set -e
        container_registry_login_server=$(terraform output -raw container_registry_login_server)
        container_registry_admin_username=$(terraform output -raw container_registry_admin_username)
        container_registry_admin_password=$(terraform output -raw container_registry_admin_password | base64)
        kube_config=$(terraform output -raw kube_config | base64 -w0)

        echo "container_registry_login_server=${container_registry_login_server}" >> $GITHUB_OUTPUT
        echo "container_registry_admin_username=${container_registry_admin_username}" >> $GITHUB_OUTPUT
        echo "container_registry_admin_password=${container_registry_admin_password}" >> $GITHUB_OUTPUT
        echo "kube_config=${kube_config}" >> $GITHUB_OUTPUT